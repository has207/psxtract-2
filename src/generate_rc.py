#!/usr/bin/env python3
"""
One-time script to generate psxtract.rc with all CUE files as individual resources
"""

import os
import re
import sys

def sanitize_filename_for_rc(filepath):
    """Keep Unix path for .rc file since we're cross-compiling on Linux"""
    return filepath

def filename_to_game_id(filepath):
    """Extract game ID from CUE filepath (e.g., cue/SCUS-94103.cue -> SCUS-94103)"""
    return os.path.splitext(os.path.basename(filepath))[0]

def main():
    # Check command line arguments
    if len(sys.argv) != 2:
        print("Usage: generate_rc.py <cue_directory>")
        print("Example: generate_rc.py ../cue")
        sys.exit(1)
    
    cue_dir = sys.argv[1]
    
    if not os.path.isdir(cue_dir):
        print(f"Error: Directory '{cue_dir}' not found")
        sys.exit(1)
    
    # Find all CUE files
    cue_files = []
    for root, dirs, files in os.walk(cue_dir):
        for file in files:
            if file.endswith('.cue'):
                filepath = os.path.join(root, file).replace('\\', '/')
                cue_files.append(filepath)
    
    cue_files.sort()
    
    print(f"Found {len(cue_files)} CUE files in {cue_dir}")
    
    # Generate psxtract.rc
    with open('psxtract.rc', 'w') as f:
        f.write('// Auto-generated Windows resource script for psxtract\n')
        f.write('// Generated by generate_rc.py - DO NOT EDIT MANUALLY\n')
        f.write('#include <windows.h>\n\n')
        f.write('// Embedded CUE files as individual RCDATA resources\n')
        f.write(f'// Total: {len(cue_files)} files\n\n')
        
        for i, filepath in enumerate(cue_files, start=1000):
            win_path = sanitize_filename_for_rc(filepath)
            game_id = filename_to_game_id(filepath)
            f.write(f'{i} RCDATA "{win_path}"\n')
    
    # Generate only the lookup table include file
    with open('cue_lookup_table.autogen', 'w') as f:
        f.write('// Auto-generated CUE lookup table\n')
        f.write('// Generated by generate_rc.py - DO NOT EDIT MANUALLY\n\n')
        
        f.write(f'static const CueResourceEntry cue_lookup[{len(cue_files) + 1}] = {{\n')
        for i, filepath in enumerate(cue_files, start=1000):
            game_id = filename_to_game_id(filepath)
            f.write(f'    {{"{game_id}", {i}}},\n')
        f.write('    {NULL, 0}  // Sentinel\n')
        f.write('};\n')
    
    print('Generated files:')
    print(f'  psxtract.rc ({len(cue_files)} resource entries)')
    print(f'  cue_lookup_table.autogen (lookup table with {len(cue_files)} entries)')
    print('')
    print('Next steps:')
    print('1. Update Makefile to compile resources and link cue_resources.cpp')
    print('2. Modify psxtract code to use load_cue_resource() instead of file I/O')

if __name__ == '__main__':
    main()
